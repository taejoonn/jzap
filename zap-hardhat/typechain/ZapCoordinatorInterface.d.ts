/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ZapCoordinatorInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "getContractName(uint256)": FunctionFragment;
    "updateAllDependencies()": FunctionFragment;
    "addImmutableContract(string,address)": FunctionFragment;
    "getContract(string)": FunctionFragment;
    "updateContract(string,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getContractName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllDependencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addImmutableContract",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateContract",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addImmutableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ZapCoordinatorInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ZapCoordinatorInterfaceInterface;

  functions: {
    getContractName(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getContractName(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updateAllDependencies(overrides?: Overrides): Promise<ContractTransaction>;

    "updateAllDependencies()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addImmutableContract(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addImmutableContract(string,address)"(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getContract(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getContract(string)"(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updateContract(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateContract(string,address)"(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getContractName(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getContractName(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateAllDependencies(overrides?: Overrides): Promise<ContractTransaction>;

  "updateAllDependencies()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addImmutableContract(
    contractName: string,
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addImmutableContract(string,address)"(
    contractName: string,
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getContract(contractName: string, overrides?: CallOverrides): Promise<string>;

  "getContract(string)"(
    contractName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  updateContract(
    contractName: string,
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateContract(string,address)"(
    contractName: string,
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getContractName(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getContractName(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateAllDependencies(overrides?: CallOverrides): Promise<void>;

    "updateAllDependencies()"(overrides?: CallOverrides): Promise<void>;

    addImmutableContract(
      contractName: string,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addImmutableContract(string,address)"(
      contractName: string,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getContract(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getContract(string)"(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    updateContract(
      contractName: string,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateContract(string,address)"(
      contractName: string,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    getContractName(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContractName(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAllDependencies(overrides?: Overrides): Promise<BigNumber>;

    "updateAllDependencies()"(overrides?: Overrides): Promise<BigNumber>;

    addImmutableContract(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addImmutableContract(string,address)"(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getContract(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContract(string)"(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateContract(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateContract(string,address)"(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getContractName(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContractName(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAllDependencies(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateAllDependencies()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addImmutableContract(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addImmutableContract(string,address)"(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getContract(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContract(string)"(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateContract(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateContract(string,address)"(
      contractName: string,
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
