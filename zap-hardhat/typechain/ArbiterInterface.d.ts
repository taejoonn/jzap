/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ArbiterInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "endSubscriptionSubscriber(address,bytes32)": FunctionFragment;
    "getSubscription(address,address,bytes32)": FunctionFragment;
    "passParams(address,bytes32,bytes32[])": FunctionFragment;
    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)": FunctionFragment;
    "endSubscriptionProvider(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "endSubscriptionSubscriber",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "passParams",
    values: [string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateSubscription",
    values: [string, BytesLike, BytesLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endSubscriptionProvider",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "endSubscriptionSubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "passParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endSubscriptionProvider",
    data: BytesLike
  ): Result;

  events: {};
}

export class ArbiterInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ArbiterInterfaceInterface;

  functions: {
    endSubscriptionSubscriber(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "endSubscriptionSubscriber(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSubscription(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getSubscription(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    passParams(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "passParams(address,bytes32,bytes32[])"(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initiateSubscription(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    endSubscriptionProvider(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "endSubscriptionProvider(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  endSubscriptionSubscriber(
    arg0: string,
    arg1: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "endSubscriptionSubscriber(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSubscription(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getSubscription(address,address,bytes32)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  passParams(
    receiver: string,
    endpoint: BytesLike,
    params: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "passParams(address,bytes32,bytes32[])"(
    receiver: string,
    endpoint: BytesLike,
    params: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initiateSubscription(
    arg0: string,
    arg1: BytesLike,
    arg2: BytesLike[],
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BytesLike[],
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  endSubscriptionProvider(
    arg0: string,
    arg1: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "endSubscriptionProvider(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    endSubscriptionSubscriber(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "endSubscriptionSubscriber(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getSubscription(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getSubscription(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    passParams(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "passParams(address,bytes32,bytes32[])"(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    initiateSubscription(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endSubscriptionProvider(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "endSubscriptionProvider(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    endSubscriptionSubscriber(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "endSubscriptionSubscriber(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSubscription(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscription(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    passParams(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "passParams(address,bytes32,bytes32[])"(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    initiateSubscription(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    endSubscriptionProvider(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "endSubscriptionProvider(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    endSubscriptionSubscriber(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "endSubscriptionSubscriber(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscription(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    passParams(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "passParams(address,bytes32,bytes32[])"(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initiateSubscription(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BytesLike[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    endSubscriptionProvider(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "endSubscriptionProvider(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
