/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenDotFactoryInterface extends ethers.utils.Interface {
  functions: {
    "initializeCurve(bytes32,bytes32,int256[])": FunctionFragment;
    "newToken(string,string)": FunctionFragment;
    "unbond(bytes32,uint256)": FunctionFragment;
    "bond(bytes32,uint256)": FunctionFragment;
    "toBytes(address)": FunctionFragment;
    "getEndpoints()": FunctionFragment;
    "curves(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "bytes32ToString(bytes32)": FunctionFragment;
    "coord()": FunctionFragment;
    "getTokenAddress(bytes32)": FunctionFragment;
    "tokenFactory()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "curves_list(uint256)": FunctionFragment;
    "reserveToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initializeCurve",
    values: [BytesLike, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "newToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "toBytes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getEndpoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "curves", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "coord", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "curves_list",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEndpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curves_list",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;

  events: {
    "DotTokenCreated(address)": EventFragment;
    "Bonded(bytes32,uint256,address)": EventFragment;
    "Unbonded(bytes32,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DotTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class TokenDotFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenDotFactoryInterface;

  functions: {
    initializeCurve(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeCurve(bytes32,bytes32,int256[])"(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newToken(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newToken(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unbond(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unbond(bytes32,uint256)"(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bond(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bond(bytes32,uint256)"(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    toBytes(
      x: string,
      overrides?: CallOverrides
    ): Promise<{
      b: string;
      0: string;
    }>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<{
      b: string;
      0: string;
    }>;

    getEndpoints(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getEndpoints()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    curves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    bytes32ToString(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    coord(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coord()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenFactory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenFactory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reserveToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "reserveToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  initializeCurve(
    specifier: BytesLike,
    symbol: BytesLike,
    curve: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeCurve(bytes32,bytes32,int256[])"(
    specifier: BytesLike,
    symbol: BytesLike,
    curve: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newToken(
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newToken(string,string)"(
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unbond(
    specifier: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unbond(bytes32,uint256)"(
    specifier: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bond(
    specifier: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bond(bytes32,uint256)"(
    specifier: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  toBytes(x: string, overrides?: CallOverrides): Promise<string>;

  "toBytes(address)"(x: string, overrides?: CallOverrides): Promise<string>;

  getEndpoints(overrides?: CallOverrides): Promise<string[]>;

  "getEndpoints()"(overrides?: CallOverrides): Promise<string[]>;

  curves(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "curves(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  bytes32ToString(x: BytesLike, overrides?: CallOverrides): Promise<string>;

  "bytes32ToString(bytes32)"(
    x: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  coord(overrides?: CallOverrides): Promise<string>;

  "coord()"(overrides?: CallOverrides): Promise<string>;

  getTokenAddress(
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTokenAddress(bytes32)"(
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  curves_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "curves_list(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reserveToken(overrides?: CallOverrides): Promise<string>;

  "reserveToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    initializeCurve(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "initializeCurve(bytes32,bytes32,int256[])"(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    newToken(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "newToken(string,string)"(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    unbond(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unbond(bytes32,uint256)"(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bond(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bond(bytes32,uint256)"(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toBytes(x: string, overrides?: CallOverrides): Promise<string>;

    "toBytes(address)"(x: string, overrides?: CallOverrides): Promise<string>;

    getEndpoints(overrides?: CallOverrides): Promise<string[]>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<string[]>;

    curves(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    bytes32ToString(x: BytesLike, overrides?: CallOverrides): Promise<string>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    coord(overrides?: CallOverrides): Promise<string>;

    "coord()"(overrides?: CallOverrides): Promise<string>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    curves_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reserveToken(overrides?: CallOverrides): Promise<string>;

    "reserveToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    DotTokenCreated(tokenAddress: null): EventFilter;

    Bonded(
      specifier: BytesLike | null,
      numDots: BigNumberish | null,
      sender: string | null
    ): EventFilter;

    Unbonded(
      specifier: BytesLike | null,
      numDots: BigNumberish | null,
      sender: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    initializeCurve(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeCurve(bytes32,bytes32,int256[])"(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    newToken(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newToken(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unbond(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unbond(bytes32,uint256)"(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bond(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bond(bytes32,uint256)"(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    toBytes(x: string, overrides?: CallOverrides): Promise<BigNumber>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndpoints(overrides?: CallOverrides): Promise<BigNumber>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    curves(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    bytes32ToString(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coord(overrides?: CallOverrides): Promise<BigNumber>;

    "coord()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeCurve(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeCurve(bytes32,bytes32,int256[])"(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newToken(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newToken(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unbond(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unbond(bytes32,uint256)"(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bond(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bond(bytes32,uint256)"(
      specifier: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    toBytes(
      x: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndpoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytes32ToString(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coord(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coord()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
