/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ArbiterInterface extends ethers.utils.Interface {
  functions: {
    "getBlockStart(address,address,bytes32)": FunctionFragment;
    "db()": FunctionFragment;
    "endSubscriptionSubscriber(address,bytes32)": FunctionFragment;
    "getSubscription(address,address,bytes32)": FunctionFragment;
    "passParams(address,bytes32,bytes32[])": FunctionFragment;
    "updateDependencies()": FunctionFragment;
    "owner()": FunctionFragment;
    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)": FunctionFragment;
    "selfDestruct()": FunctionFragment;
    "getDots(address,address,bytes32)": FunctionFragment;
    "bondageAddress()": FunctionFragment;
    "getPreBlockEnd(address,address,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "endSubscriptionProvider(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBlockStart",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "db", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endSubscriptionSubscriber",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "passParams",
    values: [string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencies",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initiateSubscription",
    values: [string, BytesLike, BytesLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfDestruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDots",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bondageAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPreBlockEnd",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "endSubscriptionProvider",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "db", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endSubscriptionSubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "passParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfDestruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondageAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreBlockEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endSubscriptionProvider",
    data: BytesLike
  ): Result;

  events: {
    "DataPurchase(address,address,uint256,uint256,bytes32[],bytes32)": EventFragment;
    "DataSubscriptionEnd(address,address,uint8)": EventFragment;
    "ParamsPassed(address,address,bytes32,bytes32[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataPurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSubscriptionEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParamsPassed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Arbiter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ArbiterInterface;

  functions: {
    getBlockStart(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBlockStart(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    db(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "db()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    endSubscriptionSubscriber(
      providerAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "endSubscriptionSubscriber(address,bytes32)"(
      providerAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSubscription(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      dots: BigNumber;
      blockStart: BigNumber;
      preBlockEnd: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getSubscription(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      dots: BigNumber;
      blockStart: BigNumber;
      preBlockEnd: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    passParams(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "passParams(address,bytes32,bytes32[])"(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateDependencies(overrides?: Overrides): Promise<ContractTransaction>;

    "updateDependencies()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initiateSubscription(
      providerAddress: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      publicKey: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
      providerAddress: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      publicKey: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    selfDestruct(overrides?: Overrides): Promise<ContractTransaction>;

    "selfDestruct()"(overrides?: Overrides): Promise<ContractTransaction>;

    getDots(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getDots(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bondageAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bondageAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPreBlockEnd(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPreBlockEnd(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    endSubscriptionProvider(
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "endSubscriptionProvider(address,bytes32)"(
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getBlockStart(
    providerAddress: string,
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBlockStart(address,address,bytes32)"(
    providerAddress: string,
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  db(overrides?: CallOverrides): Promise<string>;

  "db()"(overrides?: CallOverrides): Promise<string>;

  endSubscriptionSubscriber(
    providerAddress: string,
    endpoint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "endSubscriptionSubscriber(address,bytes32)"(
    providerAddress: string,
    endpoint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSubscription(
    providerAddress: string,
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    dots: BigNumber;
    blockStart: BigNumber;
    preBlockEnd: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getSubscription(address,address,bytes32)"(
    providerAddress: string,
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    dots: BigNumber;
    blockStart: BigNumber;
    preBlockEnd: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  passParams(
    receiver: string,
    endpoint: BytesLike,
    params: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "passParams(address,bytes32,bytes32[])"(
    receiver: string,
    endpoint: BytesLike,
    params: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateDependencies(overrides?: Overrides): Promise<ContractTransaction>;

  "updateDependencies()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  initiateSubscription(
    providerAddress: string,
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    publicKey: BigNumberish,
    blocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
    providerAddress: string,
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    publicKey: BigNumberish,
    blocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  selfDestruct(overrides?: Overrides): Promise<ContractTransaction>;

  "selfDestruct()"(overrides?: Overrides): Promise<ContractTransaction>;

  getDots(
    providerAddress: string,
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDots(address,address,bytes32)"(
    providerAddress: string,
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondageAddress(overrides?: CallOverrides): Promise<string>;

  "bondageAddress()"(overrides?: CallOverrides): Promise<string>;

  getPreBlockEnd(
    providerAddress: string,
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPreBlockEnd(address,address,bytes32)"(
    providerAddress: string,
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  endSubscriptionProvider(
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "endSubscriptionProvider(address,bytes32)"(
    subscriberAddress: string,
    endpoint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getBlockStart(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBlockStart(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    db(overrides?: CallOverrides): Promise<string>;

    "db()"(overrides?: CallOverrides): Promise<string>;

    endSubscriptionSubscriber(
      providerAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "endSubscriptionSubscriber(address,bytes32)"(
      providerAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getSubscription(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      dots: BigNumber;
      blockStart: BigNumber;
      preBlockEnd: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getSubscription(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      dots: BigNumber;
      blockStart: BigNumber;
      preBlockEnd: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    passParams(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "passParams(address,bytes32,bytes32[])"(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateDependencies(overrides?: CallOverrides): Promise<void>;

    "updateDependencies()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    initiateSubscription(
      providerAddress: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      publicKey: BigNumberish,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
      providerAddress: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      publicKey: BigNumberish,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    selfDestruct(overrides?: CallOverrides): Promise<void>;

    "selfDestruct()"(overrides?: CallOverrides): Promise<void>;

    getDots(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDots(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondageAddress(overrides?: CallOverrides): Promise<string>;

    "bondageAddress()"(overrides?: CallOverrides): Promise<string>;

    getPreBlockEnd(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPreBlockEnd(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endSubscriptionProvider(
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "endSubscriptionProvider(address,bytes32)"(
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DataPurchase(
      provider: string | null,
      subscriber: string | null,
      publicKey: null,
      amount: BigNumberish | null,
      endpointParams: null,
      endpoint: null
    ): EventFilter;

    DataSubscriptionEnd(
      provider: string | null,
      subscriber: string | null,
      terminator: BigNumberish | null
    ): EventFilter;

    ParamsPassed(
      sender: string | null,
      receiver: string | null,
      endpoint: null,
      params: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    getBlockStart(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBlockStart(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    db(overrides?: CallOverrides): Promise<BigNumber>;

    "db()"(overrides?: CallOverrides): Promise<BigNumber>;

    endSubscriptionSubscriber(
      providerAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "endSubscriptionSubscriber(address,bytes32)"(
      providerAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSubscription(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscription(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    passParams(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "passParams(address,bytes32,bytes32[])"(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateDependencies(overrides?: Overrides): Promise<BigNumber>;

    "updateDependencies()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    initiateSubscription(
      providerAddress: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      publicKey: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
      providerAddress: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      publicKey: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    selfDestruct(overrides?: Overrides): Promise<BigNumber>;

    "selfDestruct()"(overrides?: Overrides): Promise<BigNumber>;

    getDots(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDots(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondageAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "bondageAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPreBlockEnd(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPreBlockEnd(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    endSubscriptionProvider(
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "endSubscriptionProvider(address,bytes32)"(
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBlockStart(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBlockStart(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    db(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "db()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endSubscriptionSubscriber(
      providerAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "endSubscriptionSubscriber(address,bytes32)"(
      providerAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscription(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    passParams(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "passParams(address,bytes32,bytes32[])"(
      receiver: string,
      endpoint: BytesLike,
      params: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateDependencies(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateDependencies()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateSubscription(
      providerAddress: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      publicKey: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initiateSubscription(address,bytes32,bytes32[],uint256,uint64)"(
      providerAddress: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      publicKey: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    selfDestruct(overrides?: Overrides): Promise<PopulatedTransaction>;

    "selfDestruct()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getDots(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDots(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondageAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bondageAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreBlockEnd(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPreBlockEnd(address,address,bytes32)"(
      providerAddress: string,
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    endSubscriptionProvider(
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "endSubscriptionProvider(address,bytes32)"(
      subscriberAddress: string,
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
