/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BondageInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "escrowDots(address,address,bytes32,uint256)": FunctionFragment;
    "getZapBound(address,bytes32)": FunctionFragment;
    "getDotsIssued(address,bytes32)": FunctionFragment;
    "dotLimit(address,bytes32)": FunctionFragment;
    "releaseDots(address,address,bytes32,uint256)": FunctionFragment;
    "bond(address,bytes32,uint256)": FunctionFragment;
    "unbond(address,bytes32,uint256)": FunctionFragment;
    "calcZapForDots(address,bytes32,uint256)": FunctionFragment;
    "getBoundDots(address,address,bytes32)": FunctionFragment;
    "delegateBond(address,address,bytes32,uint256)": FunctionFragment;
    "currentCostOfDot(address,bytes32,uint256)": FunctionFragment;
    "returnDots(address,address,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "escrowDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getZapBound",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDotsIssued",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dotLimit",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcZapForDots",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoundDots",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBond",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentCostOfDot",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "escrowDots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getZapBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDotsIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dotLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcZapForDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoundDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCostOfDot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnDots", data: BytesLike): Result;

  events: {};
}

export class BondageInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BondageInterfaceInterface;

  functions: {
    escrowDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "escrowDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getZapBound(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getZapBound(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getDotsIssued(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getDotsIssued(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    dotLimit(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "dotLimit(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    releaseDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "releaseDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unbond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unbond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calcZapForDots(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calcZapForDots(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getBoundDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBoundDots(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    delegateBond(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateBond(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentCostOfDot(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "currentCostOfDot(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    returnDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "returnDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  escrowDots(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "escrowDots(address,address,bytes32,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getZapBound(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getZapBound(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDotsIssued(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDotsIssued(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dotLimit(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dotLimit(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  releaseDots(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "releaseDots(address,address,bytes32,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bond(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bond(address,bytes32,uint256)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unbond(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unbond(address,bytes32,uint256)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calcZapForDots(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcZapForDots(address,bytes32,uint256)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBoundDots(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBoundDots(address,address,bytes32)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegateBond(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateBond(address,address,bytes32,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentCostOfDot(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentCostOfDot(address,bytes32,uint256)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  returnDots(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "returnDots(address,address,bytes32,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    escrowDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "escrowDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getZapBound(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getZapBound(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDotsIssued(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDotsIssued(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dotLimit(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dotLimit(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "releaseDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unbond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcZapForDots(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcZapForDots(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoundDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoundDots(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateBond(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegateBond(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentCostOfDot(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentCostOfDot(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "returnDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    escrowDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "escrowDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getZapBound(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getZapBound(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDotsIssued(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDotsIssued(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dotLimit(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dotLimit(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "releaseDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unbond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unbond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calcZapForDots(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcZapForDots(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoundDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoundDots(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateBond(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateBond(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentCostOfDot(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentCostOfDot(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "returnDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    escrowDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "escrowDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getZapBound(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getZapBound(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDotsIssued(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDotsIssued(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dotLimit(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dotLimit(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "releaseDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unbond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unbond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calcZapForDots(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcZapForDots(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoundDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoundDots(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateBond(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateBond(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentCostOfDot(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentCostOfDot(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "returnDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
