/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestProviderInterface extends ethers.utils.Interface {
  functions: {
    "spec2()": FunctionFragment;
    "spec1()": FunctionFragment;
    "spec3()": FunctionFragment;
    "spec4()": FunctionFragment;
    "receive(uint256,string,bytes32,bytes32[],bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "spec2", values?: undefined): string;
  encodeFunctionData(functionFragment: "spec1", values?: undefined): string;
  encodeFunctionData(functionFragment: "spec3", values?: undefined): string;
  encodeFunctionData(functionFragment: "spec4", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receive",
    values: [BigNumberish, string, BytesLike, BytesLike[], boolean]
  ): string;

  decodeFunctionResult(functionFragment: "spec2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spec1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spec3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spec4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receive", data: BytesLike): Result;

  events: {
    "RecievedQuery(string,bytes32,bytes32[])": EventFragment;
    "TEST(uint256,bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RecievedQuery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TEST"): EventFragment;
}

export class TestProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestProviderInterface;

  functions: {
    spec2(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "spec2()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    spec1(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "spec1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    spec3(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "spec3()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    spec4(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "spec4()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    receive(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "receive(uint256,string,bytes32,bytes32[],bool)"(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  spec2(overrides?: CallOverrides): Promise<string>;

  "spec2()"(overrides?: CallOverrides): Promise<string>;

  spec1(overrides?: CallOverrides): Promise<string>;

  "spec1()"(overrides?: CallOverrides): Promise<string>;

  spec3(overrides?: CallOverrides): Promise<string>;

  "spec3()"(overrides?: CallOverrides): Promise<string>;

  spec4(overrides?: CallOverrides): Promise<string>;

  "spec4()"(overrides?: CallOverrides): Promise<string>;

  receive(
    id: BigNumberish,
    userQuery: string,
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    onchainSubscriber: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "receive(uint256,string,bytes32,bytes32[],bool)"(
    id: BigNumberish,
    userQuery: string,
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    onchainSubscriber: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    spec2(overrides?: CallOverrides): Promise<string>;

    "spec2()"(overrides?: CallOverrides): Promise<string>;

    spec1(overrides?: CallOverrides): Promise<string>;

    "spec1()"(overrides?: CallOverrides): Promise<string>;

    spec3(overrides?: CallOverrides): Promise<string>;

    "spec3()"(overrides?: CallOverrides): Promise<string>;

    spec4(overrides?: CallOverrides): Promise<string>;

    "spec4()"(overrides?: CallOverrides): Promise<string>;

    receive(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "receive(uint256,string,bytes32,bytes32[],bool)"(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    RecievedQuery(query: null, endpoint: null, params: null): EventFilter;

    TEST(res: null, b: null, s: null): EventFilter;
  };

  estimateGas: {
    spec2(overrides?: CallOverrides): Promise<BigNumber>;

    "spec2()"(overrides?: CallOverrides): Promise<BigNumber>;

    spec1(overrides?: CallOverrides): Promise<BigNumber>;

    "spec1()"(overrides?: CallOverrides): Promise<BigNumber>;

    spec3(overrides?: CallOverrides): Promise<BigNumber>;

    "spec3()"(overrides?: CallOverrides): Promise<BigNumber>;

    spec4(overrides?: CallOverrides): Promise<BigNumber>;

    "spec4()"(overrides?: CallOverrides): Promise<BigNumber>;

    receive(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "receive(uint256,string,bytes32,bytes32[],bool)"(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    spec2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spec2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spec1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spec1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spec3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spec3()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spec4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spec4()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receive(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "receive(uint256,string,bytes32,bytes32[],bool)"(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
