/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SampleContestInterface extends ethers.utils.Interface {
  functions: {
    "initializeCurve(bytes32,bytes32,int256[])": FunctionFragment;
    "settle()": FunctionFragment;
    "status()": FunctionFragment;
    "unbond(bytes32,uint256)": FunctionFragment;
    "getStatus()": FunctionFragment;
    "ttl()": FunctionFragment;
    "bond(bytes32,uint256)": FunctionFragment;
    "toBytes(address)": FunctionFragment;
    "getEndpoints()": FunctionFragment;
    "bytesToAddr(bytes)": FunctionFragment;
    "curves(bytes32)": FunctionFragment;
    "oracle()": FunctionFragment;
    "isEndpointValid(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "bytes32ToString(bytes32)": FunctionFragment;
    "coord()": FunctionFragment;
    "redeemed(address)": FunctionFragment;
    "getTokenAddress(bytes32)": FunctionFragment;
    "winValue()": FunctionFragment;
    "initializeContest(address,uint256)": FunctionFragment;
    "reset()": FunctionFragment;
    "winner()": FunctionFragment;
    "judge(bytes32)": FunctionFragment;
    "tokenFactory()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "curves_list(uint256)": FunctionFragment;
    "reserveToken()": FunctionFragment;
    "redeemed_list(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initializeCurve",
    values: [BytesLike, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "settle", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(functionFragment: "ttl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "toBytes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getEndpoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToAddr",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "curves", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isEndpointValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "coord", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeemed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "winValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeContest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;
  encodeFunctionData(functionFragment: "judge", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "curves_list",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemed_list",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ttl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEndpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytesToAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEndpointValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeContest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "judge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curves_list",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemed_list",
    data: BytesLike
  ): Result;

  events: {
    "DotTokenCreated(address)": EventFragment;
    "Bonded(bytes32,uint256,address)": EventFragment;
    "Unbonded(bytes32,uint256,address)": EventFragment;
    "Initialized(address)": EventFragment;
    "Closed()": EventFragment;
    "Judged(bytes32)": EventFragment;
    "Settled(uint256,uint256)": EventFragment;
    "Reset()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DotTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Judged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SampleContest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SampleContestInterface;

  functions: {
    initializeCurve(
      endpoint: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeCurve(bytes32,bytes32,int256[])"(
      endpoint: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settle(overrides?: Overrides): Promise<ContractTransaction>;

    "settle()"(overrides?: Overrides): Promise<ContractTransaction>;

    status(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "status()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    unbond(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unbond(bytes32,uint256)"(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getStatus(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getStatus()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ttl(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ttl()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bond(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bond(bytes32,uint256)"(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    toBytes(
      x: string,
      overrides?: CallOverrides
    ): Promise<{
      b: string;
      0: string;
    }>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<{
      b: string;
      0: string;
    }>;

    getEndpoints(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getEndpoints()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    bytesToAddr(
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bytesToAddr(bytes)"(
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    curves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    oracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "oracle()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isEndpointValid(
      _endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isEndpointValid(bytes32)"(
      _endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    bytes32ToString(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    coord(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coord()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    redeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "redeemed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    winValue(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "winValue()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    initializeContest(
      oracleAddress: string,
      _ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeContest(address,uint256)"(
      oracleAddress: string,
      _ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reset(overrides?: Overrides): Promise<ContractTransaction>;

    "reset()"(overrides?: Overrides): Promise<ContractTransaction>;

    winner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "winner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    judge(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "judge(bytes32)"(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenFactory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenFactory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reserveToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "reserveToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    redeemed_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "redeemed_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  initializeCurve(
    endpoint: BytesLike,
    symbol: BytesLike,
    curve: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeCurve(bytes32,bytes32,int256[])"(
    endpoint: BytesLike,
    symbol: BytesLike,
    curve: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settle(overrides?: Overrides): Promise<ContractTransaction>;

  "settle()"(overrides?: Overrides): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  "status()"(overrides?: CallOverrides): Promise<number>;

  unbond(
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unbond(bytes32,uint256)"(
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getStatus(overrides?: CallOverrides): Promise<BigNumber>;

  "getStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

  ttl(overrides?: CallOverrides): Promise<BigNumber>;

  "ttl()"(overrides?: CallOverrides): Promise<BigNumber>;

  bond(
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bond(bytes32,uint256)"(
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  toBytes(x: string, overrides?: CallOverrides): Promise<string>;

  "toBytes(address)"(x: string, overrides?: CallOverrides): Promise<string>;

  getEndpoints(overrides?: CallOverrides): Promise<string[]>;

  "getEndpoints()"(overrides?: CallOverrides): Promise<string[]>;

  bytesToAddr(b: BytesLike, overrides?: CallOverrides): Promise<string>;

  "bytesToAddr(bytes)"(
    b: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  curves(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "curves(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  isEndpointValid(
    _endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isEndpointValid(bytes32)"(
    _endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  bytes32ToString(x: BytesLike, overrides?: CallOverrides): Promise<string>;

  "bytes32ToString(bytes32)"(
    x: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  coord(overrides?: CallOverrides): Promise<string>;

  "coord()"(overrides?: CallOverrides): Promise<string>;

  redeemed(arg0: string, overrides?: CallOverrides): Promise<number>;

  "redeemed(address)"(arg0: string, overrides?: CallOverrides): Promise<number>;

  getTokenAddress(
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTokenAddress(bytes32)"(
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  winValue(overrides?: CallOverrides): Promise<BigNumber>;

  "winValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  initializeContest(
    oracleAddress: string,
    _ttl: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeContest(address,uint256)"(
    oracleAddress: string,
    _ttl: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reset(overrides?: Overrides): Promise<ContractTransaction>;

  "reset()"(overrides?: Overrides): Promise<ContractTransaction>;

  winner(overrides?: CallOverrides): Promise<string>;

  "winner()"(overrides?: CallOverrides): Promise<string>;

  judge(
    endpoint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "judge(bytes32)"(
    endpoint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  curves_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "curves_list(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reserveToken(overrides?: CallOverrides): Promise<string>;

  "reserveToken()"(overrides?: CallOverrides): Promise<string>;

  redeemed_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "redeemed_list(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    initializeCurve(
      endpoint: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "initializeCurve(bytes32,bytes32,int256[])"(
      endpoint: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    settle(overrides?: CallOverrides): Promise<void>;

    "settle()"(overrides?: CallOverrides): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    "status()"(overrides?: CallOverrides): Promise<number>;

    unbond(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unbond(bytes32,uint256)"(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    ttl(overrides?: CallOverrides): Promise<BigNumber>;

    "ttl()"(overrides?: CallOverrides): Promise<BigNumber>;

    bond(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bond(bytes32,uint256)"(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toBytes(x: string, overrides?: CallOverrides): Promise<string>;

    "toBytes(address)"(x: string, overrides?: CallOverrides): Promise<string>;

    getEndpoints(overrides?: CallOverrides): Promise<string[]>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<string[]>;

    bytesToAddr(b: BytesLike, overrides?: CallOverrides): Promise<string>;

    "bytesToAddr(bytes)"(
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    curves(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    isEndpointValid(
      _endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isEndpointValid(bytes32)"(
      _endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    bytes32ToString(x: BytesLike, overrides?: CallOverrides): Promise<string>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    coord(overrides?: CallOverrides): Promise<string>;

    "coord()"(overrides?: CallOverrides): Promise<string>;

    redeemed(arg0: string, overrides?: CallOverrides): Promise<number>;

    "redeemed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    winValue(overrides?: CallOverrides): Promise<BigNumber>;

    "winValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    initializeContest(
      oracleAddress: string,
      _ttl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeContest(address,uint256)"(
      oracleAddress: string,
      _ttl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reset(overrides?: CallOverrides): Promise<void>;

    "reset()"(overrides?: CallOverrides): Promise<void>;

    winner(overrides?: CallOverrides): Promise<string>;

    "winner()"(overrides?: CallOverrides): Promise<string>;

    judge(endpoint: BytesLike, overrides?: CallOverrides): Promise<void>;

    "judge(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    curves_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reserveToken(overrides?: CallOverrides): Promise<string>;

    "reserveToken()"(overrides?: CallOverrides): Promise<string>;

    redeemed_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "redeemed_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    DotTokenCreated(tokenAddress: null): EventFilter;

    Bonded(
      endpoint: BytesLike | null,
      numDots: BigNumberish | null,
      sender: string | null
    ): EventFilter;

    Unbonded(
      endpoint: BytesLike | null,
      amount: BigNumberish | null,
      sender: string | null
    ): EventFilter;

    Initialized(oracle: string | null): EventFilter;

    Closed(): EventFilter;

    Judged(winner: null): EventFilter;

    Settled(winValue: null, winTokens: null): EventFilter;

    Reset(): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    initializeCurve(
      endpoint: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeCurve(bytes32,bytes32,int256[])"(
      endpoint: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    settle(overrides?: Overrides): Promise<BigNumber>;

    "settle()"(overrides?: Overrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    "status()"(overrides?: CallOverrides): Promise<BigNumber>;

    unbond(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unbond(bytes32,uint256)"(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    ttl(overrides?: CallOverrides): Promise<BigNumber>;

    "ttl()"(overrides?: CallOverrides): Promise<BigNumber>;

    bond(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bond(bytes32,uint256)"(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    toBytes(x: string, overrides?: CallOverrides): Promise<BigNumber>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndpoints(overrides?: CallOverrides): Promise<BigNumber>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    bytesToAddr(b: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "bytesToAddr(bytes)"(
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curves(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEndpointValid(
      _endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isEndpointValid(bytes32)"(
      _endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    bytes32ToString(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coord(overrides?: CallOverrides): Promise<BigNumber>;

    "coord()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "redeemed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winValue(overrides?: CallOverrides): Promise<BigNumber>;

    "winValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    initializeContest(
      oracleAddress: string,
      _ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeContest(address,uint256)"(
      oracleAddress: string,
      _ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reset(overrides?: Overrides): Promise<BigNumber>;

    "reset()"(overrides?: Overrides): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;

    "winner()"(overrides?: CallOverrides): Promise<BigNumber>;

    judge(endpoint: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "judge(bytes32)"(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemed_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemed_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeCurve(
      endpoint: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeCurve(bytes32,bytes32,int256[])"(
      endpoint: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settle(overrides?: Overrides): Promise<PopulatedTransaction>;

    "settle()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "status()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unbond(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unbond(bytes32,uint256)"(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ttl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ttl()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bond(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bond(bytes32,uint256)"(
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    toBytes(
      x: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndpoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytesToAddr(
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bytesToAddr(bytes)"(
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEndpointValid(
      _endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEndpointValid(bytes32)"(
      _endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytes32ToString(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coord(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coord()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "redeemed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "winValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeContest(
      oracleAddress: string,
      _ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeContest(address,uint256)"(
      oracleAddress: string,
      _ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reset(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reset()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "winner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    judge(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "judge(bytes32)"(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemed_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "redeemed_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
