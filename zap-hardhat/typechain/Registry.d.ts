/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RegistryInterface extends ethers.utils.Interface {
  functions: {
    "isProviderInitiated(address)": FunctionFragment;
    "getProviderCurve(address,bytes32)": FunctionFragment;
    "initiateProviderCurve(bytes32,int256[],address)": FunctionFragment;
    "getAllProviderParams(address)": FunctionFragment;
    "db()": FunctionFragment;
    "getProviderParameter(address,bytes32)": FunctionFragment;
    "getProviderPublicKey(address)": FunctionFragment;
    "getProviderTitle(address)": FunctionFragment;
    "getCurveUnset(address,bytes32)": FunctionFragment;
    "setProviderParameter(bytes32,bytes)": FunctionFragment;
    "getAllOracles()": FunctionFragment;
    "updateDependencies()": FunctionFragment;
    "getPublicKey(address)": FunctionFragment;
    "getProviderCurveLength(address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "clearEndpoint(bytes32)": FunctionFragment;
    "getOracleAddress(uint256)": FunctionFragment;
    "getEndpointBroker(address,bytes32)": FunctionFragment;
    "selfDestruct()": FunctionFragment;
    "getProviderEndpoints(address)": FunctionFragment;
    "initiateProvider(uint256,bytes32)": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
    "getEndpointParams(address,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getTitle(address)": FunctionFragment;
    "setProviderTitle(bytes32)": FunctionFragment;
    "setEndpointParams(bytes32,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isProviderInitiated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderCurve",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateProviderCurve",
    values: [BytesLike, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProviderParams",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "db", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProviderParameter",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderTitle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurveUnset",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProviderParameter",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOracles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderCurveLength",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clearEndpoint",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpointBroker",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selfDestruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderEndpoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateProvider",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpointParams",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTitle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProviderTitle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndpointParams",
    values: [BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "isProviderInitiated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateProviderCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProviderParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "db", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProviderParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderTitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurveUnset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProviderParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderCurveLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndpointBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfDestruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderEndpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndpointParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTitle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProviderTitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndpointParams",
    data: BytesLike
  ): Result;

  events: {
    "NewProvider(address,bytes32)": EventFragment;
    "NewCurve(address,bytes32,int256[],address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewProvider"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCurve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Registry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RegistryInterface;

  functions: {
    isProviderInitiated(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isProviderInitiated(address)"(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getProviderCurve(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getProviderCurve(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    initiateProviderCurve(
      endpoint: BytesLike,
      curve: BigNumberish[],
      broker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initiateProviderCurve(bytes32,int256[],address)"(
      endpoint: BytesLike,
      curve: BigNumberish[],
      broker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAllProviderParams(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getAllProviderParams(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    db(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "db()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getProviderParameter(
      provider: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getProviderParameter(address,bytes32)"(
      provider: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getProviderPublicKey(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getProviderPublicKey(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getProviderTitle(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getProviderTitle(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getCurveUnset(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getCurveUnset(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    setProviderParameter(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProviderParameter(bytes32,bytes)"(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAllOracles(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getAllOracles()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    updateDependencies(overrides?: Overrides): Promise<ContractTransaction>;

    "updateDependencies()"(overrides?: Overrides): Promise<ContractTransaction>;

    getPublicKey(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPublicKey(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getProviderCurveLength(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getProviderCurveLength(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    clearEndpoint(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "clearEndpoint(bytes32)"(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOracleAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getOracleAddress(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getEndpointBroker(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getEndpointBroker(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    selfDestruct(overrides?: Overrides): Promise<ContractTransaction>;

    "selfDestruct()"(overrides?: Overrides): Promise<ContractTransaction>;

    getProviderEndpoints(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getProviderEndpoints(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    initiateProvider(
      publicKey: BigNumberish,
      title: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initiateProvider(uint256,bytes32)"(
      publicKey: BigNumberish,
      title: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<{
      result: string;
      0: string;
    }>;

    "stringToBytes32(string)"(
      source: string,
      overrides?: CallOverrides
    ): Promise<{
      result: string;
      0: string;
    }>;

    getEndpointParams(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getEndpointParams(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTitle(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getTitle(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setProviderTitle(
      title: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProviderTitle(bytes32)"(
      title: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEndpointParams(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEndpointParams(bytes32,bytes32[])"(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  isProviderInitiated(
    oracleAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isProviderInitiated(address)"(
    oracleAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getProviderCurve(
    provider: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getProviderCurve(address,bytes32)"(
    provider: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initiateProviderCurve(
    endpoint: BytesLike,
    curve: BigNumberish[],
    broker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initiateProviderCurve(bytes32,int256[],address)"(
    endpoint: BytesLike,
    curve: BigNumberish[],
    broker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAllProviderParams(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAllProviderParams(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  db(overrides?: CallOverrides): Promise<string>;

  "db()"(overrides?: CallOverrides): Promise<string>;

  getProviderParameter(
    provider: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getProviderParameter(address,bytes32)"(
    provider: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getProviderPublicKey(
    provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getProviderPublicKey(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProviderTitle(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getProviderTitle(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurveUnset(
    provider: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getCurveUnset(address,bytes32)"(
    provider: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setProviderParameter(
    key: BytesLike,
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProviderParameter(bytes32,bytes)"(
    key: BytesLike,
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAllOracles(overrides?: CallOverrides): Promise<string[]>;

  "getAllOracles()"(overrides?: CallOverrides): Promise<string[]>;

  updateDependencies(overrides?: Overrides): Promise<ContractTransaction>;

  "updateDependencies()"(overrides?: Overrides): Promise<ContractTransaction>;

  getPublicKey(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getPublicKey(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProviderCurveLength(
    provider: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getProviderCurveLength(address,bytes32)"(
    provider: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  clearEndpoint(
    endpoint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "clearEndpoint(bytes32)"(
    endpoint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOracleAddress(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getOracleAddress(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEndpointBroker(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEndpointBroker(address,bytes32)"(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  selfDestruct(overrides?: Overrides): Promise<ContractTransaction>;

  "selfDestruct()"(overrides?: Overrides): Promise<ContractTransaction>;

  getProviderEndpoints(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getProviderEndpoints(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initiateProvider(
    publicKey: BigNumberish,
    title: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initiateProvider(uint256,bytes32)"(
    publicKey: BigNumberish,
    title: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stringToBytes32(source: string, overrides?: CallOverrides): Promise<string>;

  "stringToBytes32(string)"(
    source: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getEndpointParams(
    provider: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getEndpointParams(address,bytes32)"(
    provider: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTitle(provider: string, overrides?: CallOverrides): Promise<string>;

  "getTitle(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setProviderTitle(
    title: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProviderTitle(bytes32)"(
    title: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEndpointParams(
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEndpointParams(bytes32,bytes32[])"(
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    isProviderInitiated(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isProviderInitiated(address)"(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProviderCurve(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getProviderCurve(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initiateProviderCurve(
      endpoint: BytesLike,
      curve: BigNumberish[],
      broker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initiateProviderCurve(bytes32,int256[],address)"(
      endpoint: BytesLike,
      curve: BigNumberish[],
      broker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllProviderParams(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAllProviderParams(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    db(overrides?: CallOverrides): Promise<string>;

    "db()"(overrides?: CallOverrides): Promise<string>;

    getProviderParameter(
      provider: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getProviderParameter(address,bytes32)"(
      provider: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getProviderPublicKey(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderPublicKey(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderTitle(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getProviderTitle(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurveUnset(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getCurveUnset(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setProviderParameter(
      key: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProviderParameter(bytes32,bytes)"(
      key: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllOracles(overrides?: CallOverrides): Promise<string[]>;

    "getAllOracles()"(overrides?: CallOverrides): Promise<string[]>;

    updateDependencies(overrides?: CallOverrides): Promise<void>;

    "updateDependencies()"(overrides?: CallOverrides): Promise<void>;

    getPublicKey(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPublicKey(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderCurveLength(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderCurveLength(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    clearEndpoint(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "clearEndpoint(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getOracleAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOracleAddress(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEndpointBroker(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEndpointBroker(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    selfDestruct(overrides?: CallOverrides): Promise<void>;

    "selfDestruct()"(overrides?: CallOverrides): Promise<void>;

    getProviderEndpoints(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getProviderEndpoints(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initiateProvider(
      publicKey: BigNumberish,
      title: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initiateProvider(uint256,bytes32)"(
      publicKey: BigNumberish,
      title: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stringToBytes32(source: string, overrides?: CallOverrides): Promise<string>;

    "stringToBytes32(string)"(
      source: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getEndpointParams(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getEndpointParams(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTitle(provider: string, overrides?: CallOverrides): Promise<string>;

    "getTitle(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setProviderTitle(
      title: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProviderTitle(bytes32)"(
      title: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setEndpointParams(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEndpointParams(bytes32,bytes32[])"(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewProvider(provider: string | null, title: BytesLike | null): EventFilter;

    NewCurve(
      provider: string | null,
      endpoint: BytesLike | null,
      curve: null,
      broker: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    isProviderInitiated(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isProviderInitiated(address)"(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderCurve(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderCurve(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateProviderCurve(
      endpoint: BytesLike,
      curve: BigNumberish[],
      broker: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initiateProviderCurve(bytes32,int256[],address)"(
      endpoint: BytesLike,
      curve: BigNumberish[],
      broker: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAllProviderParams(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllProviderParams(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    db(overrides?: CallOverrides): Promise<BigNumber>;

    "db()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProviderParameter(
      provider: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderParameter(address,bytes32)"(
      provider: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderPublicKey(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderPublicKey(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderTitle(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderTitle(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurveUnset(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurveUnset(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProviderParameter(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProviderParameter(bytes32,bytes)"(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAllOracles(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllOracles()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateDependencies(overrides?: Overrides): Promise<BigNumber>;

    "updateDependencies()"(overrides?: Overrides): Promise<BigNumber>;

    getPublicKey(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPublicKey(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderCurveLength(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderCurveLength(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    clearEndpoint(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "clearEndpoint(bytes32)"(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOracleAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOracleAddress(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndpointBroker(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEndpointBroker(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selfDestruct(overrides?: Overrides): Promise<BigNumber>;

    "selfDestruct()"(overrides?: Overrides): Promise<BigNumber>;

    getProviderEndpoints(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderEndpoints(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateProvider(
      publicKey: BigNumberish,
      title: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initiateProvider(uint256,bytes32)"(
      publicKey: BigNumberish,
      title: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stringToBytes32(string)"(
      source: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndpointParams(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEndpointParams(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTitle(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTitle(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProviderTitle(
      title: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProviderTitle(bytes32)"(
      title: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEndpointParams(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEndpointParams(bytes32,bytes32[])"(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isProviderInitiated(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isProviderInitiated(address)"(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderCurve(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProviderCurve(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateProviderCurve(
      endpoint: BytesLike,
      curve: BigNumberish[],
      broker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initiateProviderCurve(bytes32,int256[],address)"(
      endpoint: BytesLike,
      curve: BigNumberish[],
      broker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAllProviderParams(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllProviderParams(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    db(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "db()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProviderParameter(
      provider: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProviderParameter(address,bytes32)"(
      provider: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderPublicKey(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProviderPublicKey(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderTitle(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProviderTitle(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurveUnset(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurveUnset(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProviderParameter(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProviderParameter(bytes32,bytes)"(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAllOracles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllOracles()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateDependencies(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateDependencies()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPublicKey(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPublicKey(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderCurveLength(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProviderCurveLength(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clearEndpoint(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "clearEndpoint(bytes32)"(
      endpoint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOracleAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOracleAddress(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndpointBroker(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEndpointBroker(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    selfDestruct(overrides?: Overrides): Promise<PopulatedTransaction>;

    "selfDestruct()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getProviderEndpoints(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProviderEndpoints(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateProvider(
      publicKey: BigNumberish,
      title: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initiateProvider(uint256,bytes32)"(
      publicKey: BigNumberish,
      title: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stringToBytes32(string)"(
      source: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndpointParams(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEndpointParams(address,bytes32)"(
      provider: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTitle(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTitle(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProviderTitle(
      title: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProviderTitle(bytes32)"(
      title: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEndpointParams(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEndpointParams(bytes32,bytes32[])"(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
